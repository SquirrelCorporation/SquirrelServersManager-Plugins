// @ts-check
const path = require("path");
const webpack = require("webpack");
const { ModuleFederationPlugin } = webpack.container;

// These values will be dynamically replaced by the generator
const pluginId = "<%= pluginId %>"; 
const pluginComponentName = "<%= pluginComponentName %>";
const pluginExposedComponentPath = "./src/components/<%= pluginComponentName %>.tsx";
const federationName = "<%= pluginId.replace(/-/g, '_') %>"; // Convert kebab-case to snake_case for MF name

// Shared dependencies config (should ideally match the host)
const sharedConfig = {
  react: { singleton: true, requiredVersion: false },
  "react-dom": { singleton: true, requiredVersion: false },
  antd: { singleton: true, requiredVersion: false },
  // Add other shared libs matching the host config if needed
};

/** @type {import('webpack').Configuration} */
const config = {
  mode: process.env.NODE_ENV || "development",
  entry: "./src/client/index.tsx", // Default entry for client bundle
  output: {
    path: path.resolve(__dirname, "public/client"),
    // Important: Set publicPath dynamically based on pluginId
    publicPath: `/static-plugins/client/${pluginId}/`,
    clean: true,
  },
  resolve: {
    extensions: [".tsx", ".ts", ".js", ".jsx"],
  },
  module: {
    rules: [
      {
        test: /\.(ts|tsx)$/,
        exclude: /node_modules/,
        use: [
          // Using ts-loader directly as per sample
          "ts-loader",
        ],
      },
      // Add rules for CSS, images, etc. if needed
    ],
  },
  plugins: [
    new ModuleFederationPlugin({
      name: federationName, 
      library: { type: "window", name: federationName }, // Use dynamic name
      filename: "remoteEntry.js",
      exposes: {
        // Dynamically expose the component
        [`./${pluginComponentName}`]: pluginExposedComponentPath,
      },
      shared: sharedConfig,
    }),
  ],
  devtool: "source-map",
};

module.exports = config; 