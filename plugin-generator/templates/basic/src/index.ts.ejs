// Basic plugin structure generated by the toolkit
import { INestApplication } from "@nestjs/common";

// --- Type Definitions (Assume these are globally available or provided by host) ---
interface PluginLogger {
  info: (message: string, ...meta: any[]) => void;
  warn: (message: string, ...meta: any[]) => void;
  error: (message: string, ...meta: any[]) => void;
  debug: (message: string, ...meta: any[]) => void;
}

interface PluginContext {
  logger: PluginLogger;
}

interface RouteDefinition {
  path: string;
  method: "get" | "post" | "put" | "delete" | "patch" | "options" | "head";
  handler: (req: any, res: any, logger: PluginLogger) => void;
  description?: string;
}

// --- Plugin Implementation ---
const plugin = {
  loggerInstance: null as PluginLogger | null,

  async register(app: INestApplication, context: PluginContext): Promise<void> {
    this.loggerInstance = context.logger;
    if (!this.loggerInstance) {
      console.error("<%= pluginName %> Plugin: Logger was not provided!");
      this.loggerInstance = console as any; // Fallback
    }
    this.loggerInstance.info(`Registering <%= pluginName %> Plugin...`);
    // Add any plugin-specific initialization logic here
    this.loggerInstance.info(`<%= pluginName %> Plugin registered successfully!`);
  },

  registerRoutes(): RouteDefinition[] {
    if (!this.loggerInstance) {
      console.error("Cannot register routes for <%= pluginName %>: Logger not initialized!");
      return [];
    }
    const logger = this.loggerInstance;
    logger.info(`Registering <%= pluginName %> Plugin routes...`);

    return [
      // --- Add your backend routes here ---
      {
        path: "/info", // Becomes GET /plugins/<%= pluginId %>/info
        method: "get",
        handler: (req, res, logger) => {
          logger.info(`Handling GET /info request for <%= pluginId %>`);
          res.json({
            pluginName: "<%= pluginName %>",
            version: "0.0.1",
            status: "active",
          });
        },
        description: "Get basic information about the <%= pluginName %> plugin",
      },
      // Example route:
      // {
      //   path: "/data",
      //   method: "post",
      //   handler: (req, res, logger) => { /* Handle post request */ },
      //   description: "Post some data to the plugin"
      // },
      // -------------------------------------
    ];
  },
};

// Export the plugin object using the expected named export `Plugin`
// eslint-disable-next-line @typescript-eslint/naming-convention
export const Plugin = plugin;

export default plugin; 