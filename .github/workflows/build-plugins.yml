# Workflow name reflects Releases
name: Build and Update Latest Release

on:
  push:
    branches:
      - master # Trigger on master branch

jobs:
  discover_plugins:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.find_plugins.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find plugins with manifest.json
        id: find_plugins
        run: |
          echo "Starting plugin discovery..."
          PLUGINS_JSON="[]"
          # Use process substitution to avoid subshell for the while loop
          while IFS= read -r dir; do
            echo "Processing directory: $dir"
            # Determine build command
            BUILD_CMD="npm run build" # Default
            if [[ -f "$dir/build.sh" ]]; then
              BUILD_CMD="./build.sh"
              echo "  Found build.sh, using build_cmd: $BUILD_CMD"
            elif ! grep -q '"build":' "$dir/package.json" 2>/dev/null; then
               echo "  Warning: No build script found in $dir/package.json and no build.sh found. Skipping build command."
               BUILD_CMD="echo 'No build command configured'" # Fallback safely
            else
              echo "  Found 'build' script in package.json, using build_cmd: $BUILD_CMD"
            fi
            # Add to JSON array (simple jq append)
            echo "  Adding $dir to JSON..."
            PLUGINS_JSON=$(echo "$PLUGINS_JSON" | jq --arg name "$dir" --arg cmd "$BUILD_CMD" '. + [{"name": $name, "build_cmd": $cmd}]')
            echo "  Current PLUGINS_JSON: $PLUGINS_JSON"
          done < <(find . -maxdepth 2 -name manifest.json -printf '%h\n' | sed 's|^\./||')

          echo "Final PLUGINS_JSON array: $PLUGINS_JSON"
          # Wrap the array in an object with the key "include" for the matrix
          MATRIX_JSON_OBJ=$(echo "$PLUGINS_JSON" | jq '{"include": .}' | jq -c .)
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$MATRIX_JSON_OBJ" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Discovered plugins matrix output object: $MATRIX_JSON_OBJ"
        shell: bash

  build_and_package:
    needs: discover_plugins
    # Build all plugins if matrix is not empty
    if: ${{ needs.discover_plugins.outputs.matrix != 'null' && fromJSON(needs.discover_plugins.outputs.matrix).include[0] != null }}
    runs-on: ubuntu-latest
    # Permissions not needed for this job anymore
    strategy:
      matrix: ${{ fromJSON(needs.discover_plugins.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # No fetch-depth needed

      # Removed change detection step

      - name: Set up Node.js
        # No if condition needed
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.name }}/package-lock.json'

      - name: Build ${{ matrix.name }}
        # No if condition needed
        working-directory: ./${{ matrix.name }}
        run: |
          echo "Installing dependencies for ${{ matrix.name }}..."
          npm ci
          echo "Inspecting node_modules/debug after npm ci:"
          ls -la ./${{ matrix.name }}/node_modules/debug || echo "node_modules/debug not found after npm ci"
          echo "Building ${{ matrix.name }}..."
          ${{ matrix.build_cmd }}

      - name: Package ${{ matrix.name }}
        # No if condition needed
        working-directory: ./${{ matrix.name }}
        run: |
          echo "Running package script for ${{ matrix.name }}..."
          if grep -q '"package":' package.json; then
             npm run package
          else
             echo "Error: 'package' script not found in ${{ matrix.name }}/package.json"
             exit 1
          fi

      - name: List root directory before artifact upload
        # No if condition needed
        run: ls -la

      # Upload as workflow artifact to pass to release job
      - name: Upload ${{ matrix.name }} artifact
        # No if condition needed
        uses: actions/upload-artifact@v4
        with:
          name: plugin-${{ matrix.name }} # Artifact name includes plugin name
          path: |
            ${{ matrix.name }}.tar.gz
            ${{ matrix.name }}.tar.gz.sha256
          retention-days: 1 # Short retention needed

  create_release:
    needs: build_and_package # Run after all plugins are built and packaged
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases and upload assets
    steps:
      - name: Checkout code 
        uses: actions/checkout@v4

      - name: Download all plugin artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts 

      - name: List downloaded artifacts
        run: ls -R artifacts

      - name: Create/Update GitHub 'latest' Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # Use static tag 'latest'
          tag_name: latest
          # Allow overwriting the release if 'latest' tag already exists
          make_latest: true 
          # Upload all tar.gz and sha256 files
          files: |
            artifacts/*/*.tar.gz
            artifacts/*/*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 