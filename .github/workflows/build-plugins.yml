name: Build Changed Plugins (Dynamic)

on:
  push:
    branches:
      - master

jobs:
  discover_plugins:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.find_plugins.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find plugins with manifest.json
        id: find_plugins
        run: |
          echo "Starting plugin discovery..."
          PLUGINS_JSON="[]"
          # Use process substitution to avoid subshell for the while loop
          while IFS= read -r dir; do
            echo "Processing directory: $dir"
            # Determine build command
            BUILD_CMD="npm run build" # Default
            if [[ -f "$dir/build.sh" ]]; then
              BUILD_CMD="./build.sh"
              echo "  Found build.sh, using build_cmd: $BUILD_CMD"
            elif ! grep -q '"build":' "$dir/package.json" 2>/dev/null; then
               echo "  Warning: No build script found in $dir/package.json and no build.sh found. Skipping build command."
               BUILD_CMD="echo 'No build command configured'" # Fallback safely
            else
              echo "  Found 'build' script in package.json, using build_cmd: $BUILD_CMD"
            fi
            # Add to JSON array (simple jq append)
            echo "  Adding $dir to JSON..."
            PLUGINS_JSON=$(echo "$PLUGINS_JSON" | jq --arg name "$dir" --arg cmd "$BUILD_CMD" '. + [{"name": $name, "build_cmd": $cmd}]')
            echo "  Current PLUGINS_JSON: $PLUGINS_JSON"
          done < <(find . -maxdepth 2 -name manifest.json -printf '%h\n' | sed 's|^\./||')

          echo "Final PLUGINS_JSON array: $PLUGINS_JSON"
          # Wrap the array in an object with the key "include" for the matrix
          MATRIX_JSON_OBJ=$(echo "$PLUGINS_JSON" | jq '{"include": .}' | jq -c .)
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$MATRIX_JSON_OBJ" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Discovered plugins matrix output object: $MATRIX_JSON_OBJ"
        shell: bash # Ensure bash is used for process substitution

  build_and_package:
    needs: discover_plugins
    if: ${{ needs.discover_plugins.outputs.matrix != 'null' && fromJSON(needs.discover_plugins.outputs.matrix).include[0] != null }} # Check if include array is not empty
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.discover_plugins.outputs.matrix) }} # Use the output object directly
      fail-fast: false # Allow other plugin builds to continue if one fails

    steps:
      - name: Checkout code
        # Need full history to diff against merge base
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes in ${{ matrix.name }}
        id: check_changes
        run: |
          # Compare HEAD with the base of the push/PR (merge base with master)
          git diff --quiet ${{ github.event.before }} ${{ github.sha }} -- ${{ matrix.name }}/ || echo "changed=true" >> $GITHUB_OUTPUT
          # For first push to master, compare with parent commit
          # Note: This diff logic might need refinement based on your branching strategy
        shell: bash

      # Only proceed if changes were detected OR if it's a manual trigger/first push (where before is 000...)
      - name: Set up Node.js
        if: steps.check_changes.outputs.changed == 'true' || github.event.before == '0000000000000000000000000000000000000000'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.name }}/package-lock.json'

      # No need to check for manifest.json here, discovery job already did that
      - name: Build ${{ matrix.name }}
        if: steps.check_changes.outputs.changed == 'true' || github.event.before == '0000000000000000000000000000000000000000'
        working-directory: ./${{ matrix.name }}
        run: |
          echo "Installing dependencies for ${{ matrix.name }}..."
          npm ci
          echo "Building ${{ matrix.name }}..."
          ${{ matrix.build_cmd }} # Use dynamic build command

      - name: Package ${{ matrix.name }}
        if: steps.check_changes.outputs.changed == 'true' || github.event.before == '0000000000000000000000000000000000000000'
        working-directory: ./${{ matrix.name }}
        run: |
          echo "Running package script for ${{ matrix.name }}..."
          # Ensure package script exists before running
          if grep -q '"package":' package.json; then
             npm run package
          else
             echo "Error: 'package' script not found in ${{ matrix.name }}/package.json"
             exit 1
          fi

      - name: List root directory before upload
        if: steps.check_changes.outputs.changed == 'true' || github.event.before == '0000000000000000000000000000000000000000'
        run: ls -la

      - name: Upload ${{ matrix.name }} artifact
        if: steps.check_changes.outputs.changed == 'true' || github.event.before == '0000000000000000000000000000000000000000'
        uses: actions/upload-artifact@v4
        with:
          name: plugin-${{ matrix.name }}
          # Assumes npm run package outputs files to the root
          path: |
            ${{ matrix.name }}.tar.gz
            ${{ matrix.name }}.tar.gz.sha256
          retention-days: 7 